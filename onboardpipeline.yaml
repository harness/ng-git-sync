pipeline:
  name: NGGitSync-Job
  identifier: NGGitSyncJob
  projectIdentifier: rajTest
  orgIdentifier: default
  tags: {}
  variables:
    - name: account_identifier
      type: Secret
      description: ""
      value: <+input>
    - name: account_access_key
      type: Secret
      description: ""
      value: <+input>
    - name: endpoint_url
      type: String
      description: ""
      value: <+input>
    - name: git_repo_access_key
      type: Secret
      description: ""
      value: <+input>
    - name: org
      type: String
      description: ""
      value: <+execution.steps.ShellScript_2.output.outputVariables.org>
    - name: project
      type: String
      description: ""
      value: <+execution.steps.ShellScript_2.output.outputVariables.project>
  stages:
    - stage:
        name: getOrgProjectOneString
        identifier: getOrgProjectOneString
        description: ""
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: get Org Project oneline
                  identifier: ShellScript_1
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo "extracting Org Proejct Information"
                          repoUrl=<+trigger.repoUrl>
                          gitCompare=<+trigger.payload.compare>
                          echo ${gitCompare}
                          diffHash=${gitCompare##*/}
                          echo ${diffHash}
                          apt-get update
                          apt-get install git --fix-missing -y

                          term=https://
                          line=<+trigger.repoUrl>
                          line2="${line/${term}/}"
                          branch=<+trigger.targetBranch>
                          rm -rf repo
                          git clone -b ${branch} https://<+pipeline.variables.git_repo_access_key>@$line2 repo
                          cd repo
                          git diff ${diffHash} | grep "diff --git" | awk -F/ '{print substr($0,index($0,$2))}' | awk -F/ '{print $1 "/" $2}' > dirList.txt
                          sort dirList.txt | uniq > uniqDirList.txt
                          while read line; do
                            echo "$line"
                          done < uniqDirList.txt
                          oneString=$(paste -sd "," uniqDirList.txt)
                          echo "$oneString"
                    environmentVariables: []
                    outputVariables:
                      - name: oneString
                        type: String
                        value: oneString
                  timeout: 10m
        tags: {}
    - stage:
        name: Deploy
        identifier: Deploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: gitSyncService
          environment:
            environmentRef: GitSyncInfra
            deployToAll: false
            infrastructureDefinitions:
              - identifier: GitSyncInfra
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: ShellScript_2
                  identifier: ShellScript_2
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo "split org and project"
                          # echo <+pipeline.variables.orgProject>
                          echo <+repeat.item>
                          singleOrgProject=<+repeat.item>
                          org=$(echo $singleOrgProject | cut -d"/" -f1)
                          project=$(echo $singleOrgProject | cut -d"/" -f2)
                          echo "Variable 1: $org"
                          echo "Variable 2: $project"
                    environmentVariables: []
                    outputVariables:
                      - name: org
                        type: String
                        value: org
                      - name: project
                        type: String
                        value: project
                  timeout: 10m
              - step:
                  type: K8sDelete
                  name: Delete Job
                  identifier: Delete_Job
                  spec:
                    deleteResources:
                      type: ResourceName
                      spec:
                        resourceNames:
                          - Job/terraform
                  timeout: 10m
              - step:
                  type: K8sApply
                  name: Apply_jobs
                  identifier: Apply_jobs
                  spec:
                    filePaths:
                      - tfJob.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
                    skipRendering: false
                    overrides: []
                  timeout: 10m
              - step:
                  type: ShellScript
                  name: ShellScript_jobs
                  identifier: ShellScript_jobs
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          export KUBECONFIG=${HARNESS_KUBE_CONFIG_PATH} 
                          echo  
                          pods=$(kubectl get pods -n <+infra.namespace> --selector=job-name=terraform --output=jsonpath='{.items[*].metadata.name}')  
                          kubectl logs -n <+infra.namespace> $pods  
                          echo
                    environmentVariables: []
                    outputVariables: []
                  timeout: 10m
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec:
                    pruningEnabled: false
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        strategy:
          repeat:
            items: <+pipeline.stages.getOrgProjectOneString.spec.execution.steps.ShellScript_1.output.outputVariables.oneString.split(",")>
            maxConcurrency: 5
